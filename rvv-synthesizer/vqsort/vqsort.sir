def PrevValue_Ascending_128(v0: vec<e1m1>) -> vec<e1m1>:
  (v1) = vsetvlmax[mmul=1, tama]()
  (v5) = scalar[xmul=1, imm=0x0000000000000000]()
  (v2) = scalar_to_vec[e1m1, ud](v1, v5)
  (v8) = scalar[xmul=1, imm=0x0000000000000001]()
  (v6) = scalar_to_vec[e1m1, ud](v1, v8)
  (v9) = vid.v[e1m1, ud, fm](v1)
  (v11) = vand.vx[e1m1, ud, fm](v1, v9, v8)
  (v13) = vmseq.vx[e1m1, ud, fm](v1, v11, v5)
  (v15) = vmerge.vvm[e1m1, ud](v1, v2, v6, v13)
  (v17) = vmseq.vv[e1m1, ud, fm](v1, v0, v2)
  (v19) = vmerge.vvm[e1m1, ud](v1, v2, v15, v17)
  (v21) = vslideup.vx[e1m1, pd, fm](v1, v19, v8, v19)
  (v23) = vmslt.vx[e1m1, ud, fm](v1, v11, v8)
  (v25) = vmerge.vxm[e1m1, ud](v1, v21, v5, v23)
  (v27) = vsub.vv[e1m1, ud, fm](v1, v0, v15)
  (v29) = vsub.vv[e1m1, ud, fm](v1, v27, v25)
  return (v29)

def PrevValue_Descending_128(v0: vec<e1m1>) -> vec<e1m1>:
  (v1) = vsetvlmax[mmul=1, tama]()
  (v5) = scalar[xmul=1, imm=0x0000000000000000]()
  (v2) = scalar_to_vec[e1m1, ud](v1, v5)
  (v8) = scalar[xmul=1, imm=0x0000000000000001]()
  (v6) = scalar_to_vec[e1m1, ud](v1, v8)
  (v9) = vid.v[e1m1, ud, fm](v1)
  (v11) = vand.vx[e1m1, ud, fm](v1, v9, v8)
  (v13) = vmseq.vx[e1m1, ud, fm](v1, v11, v5)
  (v15) = vmerge.vvm[e1m1, ud](v1, v2, v6, v13)
  (v17) = vadd.vv[e1m1, ud, fm](v1, v0, v15)
  (v19) = vmsltu.vv[e1m1, ud, fm](v1, v17, v0)
  (v21) = vmerge.vvm[e1m1, ud](v1, v2, v15, v19)
  (v23) = vslideup.vx[e1m1, pd, fm](v1, v21, v8, v21)
  (v25) = vmslt.vx[e1m1, ud, fm](v1, v11, v8)
  (v27) = vmerge.vxm[e1m1, ud](v1, v23, v5, v25)
  (v29) = vadd.vv[e1m1, ud, fm](v1, v17, v27)
  return (v29)

def PrevValue_Ascending_64(v0: vec<e1m1>) -> vec<e1m1>:
  (v1) = vsetvlmax[mmul=1, tama]()
  (v5) = scalar[xmul=1, imm=0x0000000000000001]()
  (v2) = scalar_to_vec[e1m1, ud](v1, v5)
  (v6) = vsub.vv[e1m1, ud, fm](v1, v0, v2)
  return (v6)

def PrevValue_Descending_64(v0: vec<e1m1>) -> vec<e1m1>:
  (v1) = vsetvlmax[mmul=1, tama]()
  (v5) = scalar[xmul=1, imm=0x0000000000000001]()
  (v2) = scalar_to_vec[e1m1, ud](v1, v5)
  (v6) = vadd.vv[e1m1, ud, fm](v1, v0, v2)
  return (v6)

def PrevValue_Ascending_32(v0: vec<ef2m1>) -> vec<ef2m1>:
  (v1) = vsetvlmax[mmul=2, tama]()
  (v5) = scalar[xmul=f2, imm=0x0000000000000001]()
  (v2) = scalar_to_vec[ef2m1, ud](v1, v5)
  (v6) = vsub.vv[ef2m1, ud, fm](v1, v0, v2)
  return (v6)

def PrevValue_Descending_32(v0: vec<ef2m1>) -> vec<ef2m1>:
  (v1) = vsetvlmax[mmul=2, tama]()
  (v5) = scalar[xmul=f2, imm=0x0000000000000001]()
  (v2) = scalar_to_vec[ef2m1, ud](v1, v5)
  (v6) = vadd.vv[ef2m1, ud, fm](v1, v0, v2)
  return (v6)

def SwapAdjacentPairs_64(v0: vec<e1m1>) -> vec<e1m1>:
  (v1) = vsetvlmax[mmul=1, tama]()
  (v4) = scalar[xmul=1, imm=0x0000000000000002]()
  (v2) = vslidedown.vx[e1m1, ud, fm](v1, v0, v4)
  (v6) = vslideup.vx[e1m1, pd, fm](v1, v0, v4, v0)
  (v8) = vid.v[e1m1, ud, fm](v1)
  (v11) = scalar[xmul=1, imm=0x0000000000000001]()
  (v10) = vsrl.vx.full[e1m1, ud, fm](v1, v8, v11)
  (v13) = vand.vx[e1m1, ud, fm](v1, v10, v11)
  (v16) = scalar[xmul=1, imm=0x0000000000000000]()
  (v15) = vmseq.vx[e1m1, ud, fm](v1, v13, v16)
  (v18) = vmerge.vvm[e1m1, ud](v1, v6, v2, v15)
  return (v18)

def SwapAdjacentQuads_64(v0: vec<e1m1>) -> vec<e1m1>:
  (v1) = vsetvlmax[mmul=1, tama]()
  (v2) = vl_to_scalar[mmul=1](v1)
  (v3) = scalar[xmul=1, imm=0x0000000000000001]()
  (v4) = srl.xx[width=1](v2, v3)
  (v5) = vslidedown.vx[e1m1, ud, fm](v1, v0, v4)
  (v8) = vslideup.vx[e1m1, pd, fm](v1, v0, v4, v5)
  return (v8)

def SwapAdjacentPairs_32(v0: vec<ef2m1>) -> vec<ef2m1>:
  (v1) = vsetvlmax[mmul=2, tama]()
  (v3) = scalar[xmul=1, imm=0x0000000000000002]()
  (v2) = vslideup.vx[ef2m1, pd, fm](v1, v0, v3, v0)
  (v5) = vslidedown.vx[ef2m1, ud, fm](v1, v0, v3)
  (v8) = vid.v[ef2m1, ud, fm](v1)
  (v11) = scalar[xmul=f2, imm=0x0000000000000003]()
  (v10) = vand.vx[ef2m1, ud, fm](v1, v8, v11)
  (v14) = scalar[xmul=f2, imm=0x0000000000000002]()
  (v13) = vmslt.vx[ef2m1, ud, fm](v1, v10, v14)
  (v16) = vmerge.vvm[ef2m1, ud](v1, v2, v5, v13)
  return (v16)

def SwapAdjacentQuads_32(v0: vec<ef2m1>) -> vec<ef2m1>:
  (v1) = vec_to_vec[src=ef2m1, dest=e1m1](v0)
  (v2) = vsetvlmax[mmul=1, tama]()
  (v5) = scalar[xmul=1, imm=0x0000000000000002]()
  (v3) = vslidedown.vx[e1m1, ud, fm](v2, v1, v5)
  (v7) = vslideup.vx[e1m1, pd, fm](v2, v1, v5, v1)
  (v9) = vid.v[e1m1, ud, fm](v2)
  (v12) = scalar[xmul=1, imm=0x0000000000000001]()
  (v11) = vsrl.vx.full[e1m1, ud, fm](v2, v9, v12)
  (v14) = vand.vx[e1m1, ud, fm](v2, v11, v12)
  (v17) = scalar[xmul=1, imm=0x0000000000000000]()
  (v16) = vmseq.vx[e1m1, ud, fm](v2, v14, v17)
  (v19) = vmerge.vvm[e1m1, ud](v2, v7, v3, v16)
  (v21) = vec_to_vec[src=e1m1, dest=ef2m1](v19)
  return (v21)

def Sort2_Ascending_128_a(v0: vec<e1m1>, v1: vec<e1m1>) -> vec<e1m1>:
  (v2) = vsetvlmax[mmul=1, tama]()
  (v5) = scalar[xmul=1, imm=0x0000000000000000]()
  (v3) = vslide1down.vx[e1m1, ud, fm](v2, v0, v5)
  (v7) = vslide1down.vx[e1m1, ud, fm](v2, v1, v5)
  (v9) = vminu.vv[e1m1, ud, fm](v2, v0, v1)
  (v11) = vmsltu.vv[e1m1, ud, fm](v2, v3, v7)
  (v13) = vmseq.vv[e1m1, ud, fm](v2, v3, v7)
  (v15) = vmerge.vvm[e1m1, ud](v2, v1, v0, v11)
  (v17) = vmerge.vvm[e1m1, ud](v2, v15, v9, v13)
  (v19) = vid.v[e1m1, ud, fm](v2)
  (v22) = scalar[xmul=1, imm=0x0000000000000001]()
  (v21) = vand.vx[e1m1, ud, fm](v2, v19, v22)
  (v24) = vmseq.vx[e1m1, ud, fm](v2, v21, v5)
  (v26) = vmerge.vvm[e1m1, ud](v2, v9, v17, v24)
  return (v26)

def Sort2_Ascending_128_b(v0: vec<e1m1>, v1: vec<e1m1>) -> vec<e1m1>:
  (v2) = vsetvlmax[mmul=1, tama]()
  (v5) = scalar[xmul=1, imm=0x0000000000000000]()
  (v3) = vslide1down.vx[e1m1, ud, fm](v2, v0, v5)
  (v7) = vslide1down.vx[e1m1, ud, fm](v2, v1, v5)
  (v9) = vmsltu.vv[e1m1, ud, fm](v2, v3, v7)
  (v11) = vmseq.vv[e1m1, ud, fm](v2, v3, v7)
  (v13) = vid.v[e1m1, ud, fm](v2)
  (v16) = scalar[xmul=1, imm=0x0000000000000001]()
  (v15) = vand.vx[e1m1, ud, fm](v2, v13, v16)
  (v18) = vmseq.vx[e1m1, ud, fm](v2, v15, v5)
  (v20) = vmaxu.vv[e1m1, ud, fm](v2, v0, v1)
  (v22) = vmerge.vvm[e1m1, ud](v2, v0, v1, v9)
  (v24) = vmerge.vvm[e1m1, ud](v2, v22, v20, v11)
  (v26) = vmerge.vvm[e1m1, ud](v2, v20, v24, v18)
  return (v26)

def Sort2_Descending_128_a(v0: vec<e1m1>, v1: vec<e1m1>) -> vec<e1m1>:
  (v2) = vsetvlmax[mmul=1, tama]()
  (v5) = scalar[xmul=1, imm=0x0000000000000000]()
  (v3) = vslide1down.vx[e1m1, ud, fm](v2, v0, v5)
  (v7) = vslide1down.vx[e1m1, ud, fm](v2, v1, v5)
  (v9) = vmaxu.vv[e1m1, ud, fm](v2, v0, v1)
  (v11) = vmsltu.vv[e1m1, ud, fm](v2, v3, v7)
  (v13) = vmseq.vv[e1m1, ud, fm](v2, v3, v7)
  (v15) = vmerge.vvm[e1m1, ud](v2, v0, v1, v11)
  (v17) = vmerge.vvm[e1m1, ud](v2, v15, v9, v13)
  (v19) = vid.v[e1m1, ud, fm](v2)
  (v22) = scalar[xmul=1, imm=0x0000000000000001]()
  (v21) = vand.vx[e1m1, ud, fm](v2, v19, v22)
  (v24) = vmseq.vx[e1m1, ud, fm](v2, v21, v5)
  (v26) = vmerge.vvm[e1m1, ud](v2, v9, v17, v24)
  return (v26)

def Sort2_Descending_128_b(v0: vec<e1m1>, v1: vec<e1m1>) -> vec<e1m1>:
  (v2) = vsetvlmax[mmul=1, tama]()
  (v5) = scalar[xmul=1, imm=0x0000000000000000]()
  (v3) = vslide1down.vx[e1m1, ud, fm](v2, v0, v5)
  (v7) = vslide1down.vx[e1m1, ud, fm](v2, v1, v5)
  (v9) = vmsltu.vv[e1m1, ud, fm](v2, v3, v7)
  (v11) = vmseq.vv[e1m1, ud, fm](v2, v3, v7)
  (v13) = vid.v[e1m1, ud, fm](v2)
  (v16) = scalar[xmul=1, imm=0x0000000000000001]()
  (v15) = vand.vx[e1m1, ud, fm](v2, v13, v16)
  (v18) = vmseq.vx[e1m1, ud, fm](v2, v15, v5)
  (v20) = vminu.vv[e1m1, ud, fm](v2, v0, v1)
  (v22) = vmerge.vvm[e1m1, ud](v2, v1, v0, v9)
  (v24) = vmerge.vvm[e1m1, ud](v2, v22, v20, v11)
  (v26) = vmerge.vvm[e1m1, ud](v2, v20, v24, v18)
  return (v26)

def Sort2_Ascending_64_a(v0: vec<e1m1>, v1: vec<e1m1>) -> vec<e1m1>:
  (v2) = vsetvlmax[mmul=1, tama]()
  (v3) = vminu.vv[e1m1, ud, fm](v2, v0, v1)
  return (v3)

def Sort2_Ascending_64_b(v0: vec<e1m1>, v1: vec<e1m1>) -> vec<e1m1>:
  (v2) = vsetvlmax[mmul=1, tama]()
  (v3) = vmaxu.vv[e1m1, ud, fm](v2, v0, v1)
  return (v3)

def Sort2_Descending_64_a(v0: vec<e1m1>, v1: vec<e1m1>) -> vec<e1m1>:
  (v2) = vsetvlmax[mmul=1, tama]()
  (v3) = vmaxu.vv[e1m1, ud, fm](v2, v0, v1)
  return (v3)

def Sort2_Descending_64_b(v0: vec<e1m1>, v1: vec<e1m1>) -> vec<e1m1>:
  (v2) = vsetvlmax[mmul=1, tama]()
  (v3) = vminu.vv[e1m1, ud, fm](v2, v0, v1)
  return (v3)

def Sort2_Ascending_32_a(v0: vec<ef2m1>, v1: vec<ef2m1>) -> vec<ef2m1>:
  (v2) = vsetvlmax[mmul=2, tama]()
  (v3) = vminu.vv[ef2m1, ud, fm](v2, v0, v1)
  return (v3)

def Sort2_Ascending_32_b(v0: vec<ef2m1>, v1: vec<ef2m1>) -> vec<ef2m1>:
  (v2) = vsetvlmax[mmul=2, tama]()
  (v3) = vmaxu.vv[ef2m1, ud, fm](v2, v0, v1)
  return (v3)

def Sort2_Descending_32_a(v0: vec<ef2m1>, v1: vec<ef2m1>) -> vec<ef2m1>:
  (v2) = vsetvlmax[mmul=2, tama]()
  (v3) = vmaxu.vv[ef2m1, ud, fm](v2, v0, v1)
  return (v3)

def Sort2_Descending_32_b(v0: vec<ef2m1>, v1: vec<ef2m1>) -> vec<ef2m1>:
  (v2) = vsetvlmax[mmul=2, tama]()
  (v3) = vminu.vv[ef2m1, ud, fm](v2, v0, v1)
  return (v3)

def SortPairsDistance1_Ascending_128(v0: vec<e1m1>) -> vec<e1m1>:
  (v1) = vsetvlmax[mmul=1, tama]()
  (v4) = scalar[xmul=1, imm=0x0000000000000002]()
  (v2) = vslidedown.vx[e1m1, ud, fm](v1, v0, v4)
  (v6) = vslideup.vx[e1m1, pd, fm](v1, v0, v4, v0)
  (v8) = vid.v[e1m1, ud, fm](v1)
  (v11) = scalar[xmul=1, imm=0x0000000000000001]()
  (v10) = vsrl.vx.full[e1m1, ud, fm](v1, v8, v11)
  (v13) = vand.vx[e1m1, ud, fm](v1, v10, v11)
  (v16) = scalar[xmul=1, imm=0x0000000000000000]()
  (v15) = vmseq.vx[e1m1, ud, fm](v1, v13, v16)
  (v18) = vmerge.vvm[e1m1, ud](v1, v6, v2, v15)
  (v20) = vslide1down.vx[e1m1, ud, fm](v1, v0, v16)
  (v22) = vslide1down.vx[e1m1, ud, fm](v1, v18, v16)
  (v24) = vminu.vv[e1m1, ud, fm](v1, v0, v18)
  (v26) = vmsltu.vv[e1m1, ud, fm](v1, v20, v22)
  (v28) = vmseq.vv[e1m1, ud, fm](v1, v20, v22)
  (v30) = vmerge.vvm[e1m1, ud](v1, v18, v0, v26)
  (v32) = vmerge.vvm[e1m1, ud](v1, v30, v24, v28)
  (v34) = vand.vx[e1m1, ud, fm](v1, v8, v11)
  (v36) = vmseq.vx[e1m1, ud, fm](v1, v34, v16)
  (v38) = vmerge.vvm[e1m1, ud](v1, v24, v32, v36)
  (v40) = vmaxu.vv[e1m1, ud, fm](v1, v0, v18)
  (v42) = vmerge.vvm[e1m1, ud](v1, v0, v18, v26)
  (v44) = vmerge.vvm[e1m1, ud](v1, v42, v40, v28)
  (v46) = vmerge.vvm[e1m1, ud](v1, v40, v44, v36)
  (v48) = vmerge.vvm[e1m1, ud](v1, v46, v38, v15)
  return (v48)

def SortPairsDistance1_Ascending_64(v0: vec<e1m1>) -> vec<e1m1>:
  (v1) = vsetvlmax[mmul=1, tama]()
  (v4) = scalar[xmul=1, imm=0x0000000000000000]()
  (v2) = vslide1up.vx[e1m1, ud, fm](v1, v0, v4)
  (v6) = vslide1down.vx[e1m1, ud, fm](v1, v0, v4)
  (v8) = vid.v[e1m1, ud, fm](v1)
  (v11) = scalar[xmul=1, imm=0x0000000000000001]()
  (v10) = vand.vx[e1m1, ud, fm](v1, v8, v11)
  (v13) = vmseq.vx[e1m1, ud, fm](v1, v10, v4)
  (v15) = vmerge.vvm[e1m1, ud](v1, v2, v6, v13)
  (v17) = vminu.vv[e1m1, ud, fm](v1, v0, v15)
  (v19) = vmaxu.vv[e1m1, ud, fm](v1, v0, v15)
  (v21) = vmerge.vvm[e1m1, ud](v1, v19, v17, v13)
  return (v21)

def SortPairsDistance1_Ascending_32(v0: vec<ef2m1>) -> vec<ef2m1>:
  (v1) = vec_to_vec[src=ef2m1, dest=e1m1](v0)
  (v2) = vsetvlmax[mmul=1, tama]()
  (v5) = scalar[xmul=1, imm=0x0000000000000020]()
  (v3) = vsrl.vx.full[e1m1, ud, fm](v2, v1, v5)
  (v7) = vsll.vx.full[e1m1, ud, fm](v2, v1, v5)
  (v9) = vor.vv[e1m1, ud, fm](v2, v3, v7)
  (v11) = vec_to_vec[src=e1m1, dest=ef2m1](v9)
  (v12) = vsetvlmax[mmul=2, tama]()
  (v13) = vminu.vv[ef2m1, ud, fm](v12, v0, v11)
  (v16) = vmaxu.vv[ef2m1, ud, fm](v12, v0, v11)
  (v19) = vsetvlrelay[mmul=1, src_mmul=1, tama](v2)
  (v20) = scalar[xmul=1, imm=0x0000000000000001]()
  (v18) = scalar_to_vec[e1m1, ud](v19, v20)
  (v21) = vec_to_vec[src=e1m1, dest=ef2m1](v18)
  (v24) = vsetvlrelay[mmul=2, src_mmul=2, tama](v12)
  (v23) = scalar[xmul=f2, imm=0x0000000000000000]()
  (v22) = vmsne.vx[ef2m1, ud, fm](v24, v21, v23)
  (v25) = vmerge.vvm[ef2m1, ud](v24, v16, v13, v22)
  return (v25)

def SortPairsDistance1_Descending_128(v0: vec<e1m1>) -> vec<e1m1>:
  (v1) = vsetvlmax[mmul=1, tama]()
  (v4) = scalar[xmul=1, imm=0x0000000000000002]()
  (v2) = vslidedown.vx[e1m1, ud, fm](v1, v0, v4)
  (v6) = vslideup.vx[e1m1, pd, fm](v1, v0, v4, v0)
  (v8) = vid.v[e1m1, ud, fm](v1)
  (v11) = scalar[xmul=1, imm=0x0000000000000001]()
  (v10) = vsrl.vx.full[e1m1, ud, fm](v1, v8, v11)
  (v13) = vand.vx[e1m1, ud, fm](v1, v10, v11)
  (v16) = scalar[xmul=1, imm=0x0000000000000000]()
  (v15) = vmseq.vx[e1m1, ud, fm](v1, v13, v16)
  (v18) = vmerge.vvm[e1m1, ud](v1, v6, v2, v15)
  (v20) = vslide1down.vx[e1m1, ud, fm](v1, v0, v16)
  (v22) = vslide1down.vx[e1m1, ud, fm](v1, v18, v16)
  (v24) = vmaxu.vv[e1m1, ud, fm](v1, v0, v18)
  (v26) = vmsltu.vv[e1m1, ud, fm](v1, v20, v22)
  (v28) = vmseq.vv[e1m1, ud, fm](v1, v20, v22)
  (v30) = vmerge.vvm[e1m1, ud](v1, v0, v18, v26)
  (v32) = vmerge.vvm[e1m1, ud](v1, v30, v24, v28)
  (v34) = vand.vx[e1m1, ud, fm](v1, v8, v11)
  (v36) = vmseq.vx[e1m1, ud, fm](v1, v34, v16)
  (v38) = vmerge.vvm[e1m1, ud](v1, v24, v32, v36)
  (v40) = vminu.vv[e1m1, ud, fm](v1, v0, v18)
  (v42) = vmerge.vvm[e1m1, ud](v1, v18, v0, v26)
  (v44) = vmerge.vvm[e1m1, ud](v1, v42, v40, v28)
  (v46) = vmerge.vvm[e1m1, ud](v1, v40, v44, v36)
  (v48) = vmerge.vvm[e1m1, ud](v1, v46, v38, v15)
  return (v48)

def SortPairsDistance1_Descending_64(v0: vec<e1m1>) -> vec<e1m1>:
  (v1) = vsetvlmax[mmul=1, tama]()
  (v4) = scalar[xmul=1, imm=0x0000000000000000]()
  (v2) = vslide1up.vx[e1m1, ud, fm](v1, v0, v4)
  (v6) = vslide1down.vx[e1m1, ud, fm](v1, v0, v4)
  (v8) = vid.v[e1m1, ud, fm](v1)
  (v11) = scalar[xmul=1, imm=0x0000000000000001]()
  (v10) = vand.vx[e1m1, ud, fm](v1, v8, v11)
  (v13) = vmseq.vx[e1m1, ud, fm](v1, v10, v4)
  (v15) = vmerge.vvm[e1m1, ud](v1, v2, v6, v13)
  (v17) = vmaxu.vv[e1m1, ud, fm](v1, v0, v15)
  (v19) = vminu.vv[e1m1, ud, fm](v1, v0, v15)
  (v21) = vmerge.vvm[e1m1, ud](v1, v19, v17, v13)
  return (v21)

def SortPairsDistance1_Descending_32(v0: vec<ef2m1>) -> vec<ef2m1>:
  (v1) = vec_to_vec[src=ef2m1, dest=e1m1](v0)
  (v2) = vsetvlmax[mmul=1, tama]()
  (v5) = scalar[xmul=1, imm=0x0000000000000020]()
  (v3) = vsrl.vx.full[e1m1, ud, fm](v2, v1, v5)
  (v7) = vsll.vx.full[e1m1, ud, fm](v2, v1, v5)
  (v9) = vor.vv[e1m1, ud, fm](v2, v3, v7)
  (v11) = vec_to_vec[src=e1m1, dest=ef2m1](v9)
  (v12) = vsetvlmax[mmul=2, tama]()
  (v13) = vmaxu.vv[ef2m1, ud, fm](v12, v0, v11)
  (v16) = vminu.vv[ef2m1, ud, fm](v12, v0, v11)
  (v19) = vsetvlrelay[mmul=1, src_mmul=1, tama](v2)
  (v20) = scalar[xmul=1, imm=0x0000000000000001]()
  (v18) = scalar_to_vec[e1m1, ud](v19, v20)
  (v21) = vec_to_vec[src=e1m1, dest=ef2m1](v18)
  (v24) = vsetvlrelay[mmul=2, src_mmul=2, tama](v12)
  (v23) = scalar[xmul=f2, imm=0x0000000000000000]()
  (v22) = vmsne.vx[ef2m1, ud, fm](v24, v21, v23)
  (v25) = vmerge.vvm[ef2m1, ud](v24, v16, v13, v22)
  return (v25)

def SortPairsDistance4_Ascending_64(v0: vec<e1m1>) -> vec<e1m1>:
  (v1) = vsetvlmax[mmul=1, tama]()
  (v2) = vl_to_scalar[mmul=1](v1)
  (v3) = scalar[xmul=1, imm=0x0000000000000001]()
  (v4) = srl.xx[width=1](v2, v3)
  (v5) = vslidedown.vx[e1m1, ud, fm](v1, v0, v4)
  (v8) = vslideup.vx[e1m1, pd, fm](v1, v0, v4, v5)
  (v10) = vminu.vv[e1m1, ud, fm](v1, v0, v8)
  (v12) = vmaxu.vv[e1m1, ud, fm](v1, v0, v8)
  (v14) = vslidedown.vx[e1m1, ud, fm](v1, v12, v4)
  (v16) = vslideup.vx[e1m1, pd, fm](v1, v14, v4, v10)
  return (v16)

def SortPairsDistance4_Ascending_32(v0: vec<ef2m1>) -> vec<ef2m1>:
  (v1) = vec_to_vec[src=ef2m1, dest=e1m1](v0)
  (v2) = vsetvlmax[mmul=1, tama]()
  (v5) = scalar[xmul=1, imm=0x0000000000000002]()
  (v3) = vslidedown.vx[e1m1, ud, fm](v2, v1, v5)
  (v7) = vslideup.vx[e1m1, pd, fm](v2, v1, v5, v1)
  (v9) = vid.v[e1m1, ud, fm](v2)
  (v12) = scalar[xmul=1, imm=0x0000000000000001]()
  (v11) = vsrl.vx.full[e1m1, ud, fm](v2, v9, v12)
  (v14) = vand.vx[e1m1, ud, fm](v2, v11, v12)
  (v17) = scalar[xmul=1, imm=0x0000000000000000]()
  (v16) = vmseq.vx[e1m1, ud, fm](v2, v14, v17)
  (v19) = vmerge.vvm[e1m1, ud](v2, v7, v3, v16)
  (v21) = vec_to_vec[src=e1m1, dest=ef2m1](v19)
  (v22) = vsetvlmax[mmul=2, tama]()
  (v23) = vminu.vv[ef2m1, ud, fm](v22, v0, v21)
  (v26) = vmaxu.vv[ef2m1, ud, fm](v22, v0, v21)
  (v28) = vec_to_vec[src=ef2m1, dest=e1m1](v26)
  (v29) = vec_to_vec[src=ef2m1, dest=e1m1](v23)
  (v31) = vsetvlrelay[mmul=1, src_mmul=1, tama](v2)
  (v30) = vmerge.vvm[e1m1, ud](v31, v28, v29, v16)
  (v32) = vec_to_vec[src=e1m1, dest=ef2m1](v30)
  return (v32)

def SortPairsDistance4_Descending_64(v0: vec<e1m1>) -> vec<e1m1>:
  (v1) = vsetvlmax[mmul=1, tama]()
  (v2) = vl_to_scalar[mmul=1](v1)
  (v3) = scalar[xmul=1, imm=0x0000000000000001]()
  (v4) = srl.xx[width=1](v2, v3)
  (v5) = vslidedown.vx[e1m1, ud, fm](v1, v0, v4)
  (v8) = vslideup.vx[e1m1, pd, fm](v1, v0, v4, v5)
  (v10) = vmaxu.vv[e1m1, ud, fm](v1, v0, v8)
  (v12) = vminu.vv[e1m1, ud, fm](v1, v0, v8)
  (v14) = vslidedown.vx[e1m1, ud, fm](v1, v12, v4)
  (v16) = vslideup.vx[e1m1, pd, fm](v1, v14, v4, v10)
  return (v16)

def SortPairsDistance4_Descending_32(v0: vec<ef2m1>) -> vec<ef2m1>:
  (v1) = vec_to_vec[src=ef2m1, dest=e1m1](v0)
  (v2) = vsetvlmax[mmul=1, tama]()
  (v5) = scalar[xmul=1, imm=0x0000000000000002]()
  (v3) = vslidedown.vx[e1m1, ud, fm](v2, v1, v5)
  (v7) = vslideup.vx[e1m1, pd, fm](v2, v1, v5, v1)
  (v9) = vid.v[e1m1, ud, fm](v2)
  (v12) = scalar[xmul=1, imm=0x0000000000000001]()
  (v11) = vsrl.vx.full[e1m1, ud, fm](v2, v9, v12)
  (v14) = vand.vx[e1m1, ud, fm](v2, v11, v12)
  (v17) = scalar[xmul=1, imm=0x0000000000000000]()
  (v16) = vmseq.vx[e1m1, ud, fm](v2, v14, v17)
  (v19) = vmerge.vvm[e1m1, ud](v2, v7, v3, v16)
  (v21) = vec_to_vec[src=e1m1, dest=ef2m1](v19)
  (v22) = vsetvlmax[mmul=2, tama]()
  (v23) = vmaxu.vv[ef2m1, ud, fm](v22, v0, v21)
  (v26) = vminu.vv[ef2m1, ud, fm](v22, v0, v21)
  (v28) = vec_to_vec[src=ef2m1, dest=e1m1](v26)
  (v29) = vec_to_vec[src=ef2m1, dest=e1m1](v23)
  (v31) = vsetvlrelay[mmul=1, src_mmul=1, tama](v2)
  (v30) = vmerge.vvm[e1m1, ud](v31, v28, v29, v16)
  (v32) = vec_to_vec[src=e1m1, dest=ef2m1](v30)
  return (v32)

